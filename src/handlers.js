import { handleAddStreak, handleCheckStreaks, handleDeleteStreak } from './streaks';
import { saveUserData, getUserData, checkServicesAvailability, saveMessage, deleteChatHistory } from './assistant';
import { handleAddTask, handleViewTasks, handleStats } from './tasks.js';
import { sendMessage, deleteMessage } from './utils';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
export async function handleClearCommand(db, TELEGRAM_API_URL, message) {
	const result = await deleteChatHistory(db, message.chat.id);
	await sendMessage(TELEGRAM_API_URL, message.chat.id, result.message);
}

// –§—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ä—Ç—É
export async function handleStartCommand(env, TELEGRAM_API_URL, message) {
	const chatId = message.chat.id;
	const command = 'start';
	const previousRecord = await env.DB.prepare('SELECT message_id FROM bot_messages WHERE chat_id = ? AND command = ?')
		.bind(chatId, command)
		.first();

	if (previousRecord && previousRecord.message_id) {
		try {
			await deleteMessage(TELEGRAM_API_URL, chatId, previousRecord.message_id);
		} catch (error) {
			console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è /start:', error);
		}
	}

	const userData = (await getUserData(env.DB, message.from.id)) || {};
	const userName = userData.first_name || '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';
	const reply = `–ü—Ä–∏–≤—ñ—Ç, ${userName}! üëã\n\n–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –§–ª—é–∫—Å—ñ. –û–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂—á–µ, –∞–±–æ –ø—Ä–æ—Å—Ç–æ —Å–ø—ñ–ª–∫—É–π—Å—è –∑—ñ –º–Ω–æ—é.`;

	const keyboard = {
		inline_keyboard: [
			[
				{ text: 'üá∫üá¶ –ù–∞ –ó–°–£', url: 'https://savelife.in.ua/projects/status/active/' },
				{ text: '‚ùì –î–æ–ø–æ–º–æ–≥–∞', callback_data: 'help' },
			],
		],
	};

	const sentMessage = await sendMessage(TELEGRAM_API_URL, chatId, reply, {
		reply_markup: JSON.stringify(keyboard),
	});

	await env.DB.prepare('INSERT OR REPLACE INTO bot_messages (chat_id, command, message_id) VALUES (?, ?, ?)')
		.bind(chatId, command, sentMessage.message_id)
		.run();

	await deleteMessage(TELEGRAM_API_URL, chatId, message.message_id);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏
export async function handleHelpCommand(env, TELEGRAM_API_URL, message, shouldDeleteOriginalMessage = true) {
	const chatId = message.chat.id;
	const command = 'help';
	const previousRecord = await env.DB.prepare('SELECT message_id FROM bot_messages WHERE chat_id = ? AND command = ?')
		.bind(chatId, command)
		.first();

	if (previousRecord && previousRecord.message_id) {
		try {
			await deleteMessage(TELEGRAM_API_URL, chatId, previousRecord.message_id);
		} catch (error) {
			console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è /help:', error);
		}
	}

	const keyboard = {
		inline_keyboard: [
			[
				{ text: 'üöÄ –û—Å–Ω–æ–≤–Ω—ñ', callback_data: 'help_main' },
				{ text: 'üí† –®–Ü', callback_data: 'help_ai' },
			],
			[
				{ text: 'üìù –ó–∞–≤–¥–∞–Ω–Ω—è', callback_data: 'help_tasks' },
				{ text: 'üéØ –¶—ñ–ª—ñ', callback_data: 'help_streaks' },
			],
			[{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'help_stats' }],
		],
	};

	const reply = `‚úª *–í—ñ—Ç–∞—é!* –Ø –§–ª—é–∫—Å—ñ, —ñ –≤–º—ñ—é –±–∞–≥–∞—Ç–æ —á–æ–≥–æ.

	üì≤ _–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É –ø–æ –∫–æ–º–∞–Ω–¥—ñ._`;

	const sentMessage = await sendMessage(TELEGRAM_API_URL, chatId, reply, {
		parse_mode: 'Markdown',
		reply_markup: JSON.stringify(keyboard),
	});

	await env.DB.prepare('INSERT OR REPLACE INTO bot_messages (chat_id, command, message_id) VALUES (?, ?, ?)')
		.bind(chatId, command, sentMessage.message_id)
		.run();

	if (shouldDeleteOriginalMessage && message.message_id) {
		await deleteMessage(TELEGRAM_API_URL, chatId, message.message_id);
	}
}

// –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ü—ñ–ª—ñ
export async function handleStreakCommand(db, TELEGRAM_API_URL, message) {
	const args = message.text.substring(8).trim().split(' ');
	if (args.length < 1) {
		const reply = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /streak add <–Ω–∞–∑–≤–∞ —Ü—ñ–ª—ñ>, /streak check –∞–±–æ /streak delete <–Ω–∞–∑–≤–∞ —Ü—ñ–ª—ñ>.';
		await sendMessage(TELEGRAM_API_URL, message.chat.id, reply);
		return;
	}
	const streakCommand = args[0];
	if (streakCommand === 'add') {
		const goalName = args.slice(1).join(' ');
		await handleAddStreak(db, TELEGRAM_API_URL, message.chat.id, goalName);
	} else if (streakCommand === 'check') {
		await handleCheckStreaks(db, TELEGRAM_API_URL, message.chat.id);
	} else if (streakCommand === 'delete') {
		const goalName = args.slice(1).join(' ');
		await handleDeleteStreak(db, TELEGRAM_API_URL, message.chat.id, goalName);
	} else {
		const reply =
			'‚ö†Ô∏è *–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ streak.*\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `/streak add <–Ω–∞–∑–≤–∞ —Ü—ñ–ª—ñ>`, `/streak check` –∞–±–æ `/streak delete <–Ω–∞–∑–≤–∞ —Ü—ñ–ª—ñ>`.';
		await sendMessage(TELEGRAM_API_URL, message.chat.id, reply, { parse_mode: 'Markdown' });
	}
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É
export async function handleStatusCommand(env, TELEGRAM_API_URL, message) {
	const status = await checkServicesAvailability();
	const reply =
		`‚úª *–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ:*\n\n` +
		`–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É: ${status.textGeneration ? 'üíö' : '‚ù§Ô∏è'}\n` +
		`–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å: ${status.imageGeneration ? 'üíö' : '‚ù§Ô∏è'}\n` +
		`–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å: ${status.imageRecognition ? 'üíö' : '‚ù§Ô∏è'}`;

	await sendMessage(TELEGRAM_API_URL, message.chat.id, reply, { parse_mode: 'Markdown' });
	await saveMessage(env.DB, message.from.id, message.chat.id, 'bot', reply);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∞–∂–ª–∏–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
export async function handleSetDataCommand(db, TELEGRAM_API_URL, message) {
	const data = message.text.substring(8).trim();
	if (!data) {
		const reply = 'üìÉ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –¥–∞–Ω—ñ –¥–ª—è –∑–∞–ø–∏—Å—É.';
		await sendMessage(TELEGRAM_API_URL, message.chat.id, reply);
		return;
	}
	await saveUserData(db, message.from.id, data);
	const reply = `üéâ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ñ: \`${data}\``;
	await sendMessage(TELEGRAM_API_URL, message.chat.id, reply, { parse_mode: 'Markdown' });
	await saveMessage(db, message.from.id, message.chat.id, 'bot', reply);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID
export async function handleIdCommand(env, TELEGRAM_API_URL, message) {
	let reply;

	if (message.reply_to_message && message.reply_to_message.sticker) {
		reply = `üñº ID —Å—Ç—ñ–∫–µ—Ä–∞: \`${message.reply_to_message.sticker.file_id}\``;
	} else {
		reply = `ü™™ –í–∞—à Telegram ID: \`${message.from.id}\``;
	}

	await sendMessage(TELEGRAM_API_URL, message.chat.id, reply, { parse_mode: 'Markdown' });
	await saveMessage(env.DB, message.from.id, message.chat.id, 'bot', reply);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω–Ω—è
export async function handleAddCommand(db, TELEGRAM_API_URL, message) {
	const args = message.text.substring(5).trim().split(' ');
	if (args.length < 3) {
		const reply = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /add <–¥–µ–Ω—å> <—á–∞—Å> <–∑–∞–≤–¥–∞–Ω–Ω—è>';
		await sendMessage(TELEGRAM_API_URL, message.chat.id, reply);
		return;
	}
	const [dayArg, timeArg, ...taskParts] = args;
	const task = taskParts.join(' ');
	await handleAddTask(db, TELEGRAM_API_URL, message.chat.id, dayArg, timeArg, task);
}

// –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—å–æ–≥–æ–¥–Ω—ñ
export async function handleTodayCommand(db, TELEGRAM_API_URL, message) {
	await handleViewTasks(db, TELEGRAM_API_URL, message.chat.id, 'today');
}

// –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–µ–≤–Ω–æ–≥–æ –¥–Ω—è
export async function handleTasksCommand(db, TELEGRAM_API_URL, message) {
	const dayArg = message.text.substring(7).trim();
	await handleViewTasks(db, TELEGRAM_API_URL, message.chat.id, dayArg);
}

// –§—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export async function handleStatsCommand(db, TELEGRAM_API_URL, message) {
	const period = message.text.substring(7).trim().toLowerCase();
	if (period === 'week' || period === 'month') {
		await handleStats(db, TELEGRAM_API_URL, message.chat.id, period);
	} else {
		const reply = '–ù–µ–≤—ñ–¥–æ–º–∏–π –ø–µ—Ä—ñ–æ–¥. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /stats week –∞–±–æ /stats month.';
		await sendMessage(TELEGRAM_API_URL, message.chat.id, reply);
	}
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
export async function handleBroadcastCommand(env, TELEGRAM_API_URL, message, admins) {
	const senderID = message.from.id;
	if (!admins.includes(senderID)) {
		await sendMessage(TELEGRAM_API_URL, message.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.');
		return;
	}

	const args = message.text.split(' ');
	if (args.length < 2) {
		await sendMessage(TELEGRAM_API_URL, message.chat.id, '‚ö† –§–æ—Ä–º–∞—Ç: /broadcast <user_id –∞–±–æ "all"> <message>');
		return;
	}

	const target = args[1];
	const text = args.slice(2).join(' ');

	if (!text) {
		await sendMessage(TELEGRAM_API_URL, message.chat.id, '‚ö† –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.');
		return;
	}

	if (target.toLowerCase() === 'all') {
		const { results } = await env.DB.prepare(`SELECT user_id FROM user_data`).all();

		if (results.length === 0) {
			await sendMessage(TELEGRAM_API_URL, message.chat.id, '‚ö† –£ –±–∞–∑—ñ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.');
			return;
		}

		for (const user of results) {
			await sendMessage(TELEGRAM_API_URL, user.user_id, `üì¢ *–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó:*\n\n${text}`, { parse_mode: 'Markdown' });
			await new Promise((resolve) => setTimeout(resolve, 500));
		}

		await sendMessage(TELEGRAM_API_URL, message.chat.id, `‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ *${results.length}* –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.`, {
			parse_mode: 'Markdown',
		});
	} else {
		await sendMessage(TELEGRAM_API_URL, target, `üì¢ *–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó:*\n\n${text}`, { parse_mode: 'Markdown' });
		await sendMessage(TELEGRAM_API_URL, message.chat.id, '‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.');
	}
}
