import { handleTaskType, handleViewTasks, handleViewTasksButtons, getTasks, saveTasks, sortTasksByTime, getWeekNumber } from './tasks.js';
import { sendMessage, editTelegramMessage, answerCallbackQuery } from './utils.js';
import { handleHelpCommand } from './handlers.js';

export async function handleCallbackQuery(env, TELEGRAM_API_URL, callbackQuery) {
	if (!callbackQuery || !callbackQuery.message || !callbackQuery.message.chat) {
		console.error('Invalid callback query structure:', callbackQuery);
		return;
	}

	const chatId = callbackQuery.message.chat.id;
	const messageId = callbackQuery.message.message_id;
	const data = callbackQuery.data;

	const helpTexts = {
		help_tasks: {
			text: `üìù *–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –∑–∞–≤–¥–∞–Ω—å:*\n
- /add <–¥–µ–Ω—å> <—á–∞—Å> <–∑–∞–≤–¥–∞–Ω–Ω—è> - –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è\n
- /today - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n
- /tasks <–¥–µ–Ω—å> - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–µ–Ω—å\n
**–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ**`,
			keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'help' }]],
		},

		help_ai: {
			text: `üí† *–ö–æ–º–∞–Ω–¥–∏ –®–Ü:*\n
- /status - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –®–Ü —Å–µ—Ä–≤—ñ—Å—ñ–≤\n
- /image <–ø—Ä–æ–º–ø—Ç> - –∑–≥–µ–Ω–µ—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n
- /remember <–¥–∞–Ω—ñ> - –¥–æ–¥–∞—Ç–∏ –≤ –ø–∞–º'—è—Ç—å –®–Ü`,
			keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'help' }]],
		},

		help_main: {
			text: `üöÄ *–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n
- /start - –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n
- /help - –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É\n
- /id - –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞`,
			keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'help' }]],
		},

		help_stats: {
			text: `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n
- /stats week - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å\n
- /stats month - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å`,
			keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'help' }]],
		},

		help_streaks: {
			text: `üéØ *–¶—ñ–ª—ñ (Streaks):*\n
- /streak add <–Ω–∞–∑–≤–∞> - –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —Ü—ñ–ª—å\n
- /streak check - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ streaks\n
- /streak delete <–Ω–∞–∑–≤–∞> - –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—ñ–ª—å`,
			keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'help' }]],
		},
	};

	const db = env.DB;

	if (helpTexts[data]) {
		await editTelegramMessage(TELEGRAM_API_URL, chatId, messageId, helpTexts[data].text, {
			parse_mode: 'Markdown',
			reply_markup: JSON.stringify({ inline_keyboard: helpTexts[data].keyboard }),
		});
		// –û–±—Ä–æ–±–Ω–∏–∫ help
	} else if (data === 'help') {
		await handleHelpCommand(env, TELEGRAM_API_URL, callbackQuery.message, false);
	} else if (data.startsWith('type_')) {
		const parts = data.split('_');
		const dayArg = parts[1];
		const timeArg = parts[2];
		const task = parts.slice(3, -1).join(' ');
		const taskType = parts[parts.length - 1];
		await handleTaskType(db, TELEGRAM_API_URL, chatId, dayArg, timeArg, task, taskType);
	} else if (data.startsWith('task_')) {
		const parts = data.split('_');
		const viewDay = parts[1];
		const taskIndex = parseInt(parts[2], 10);
		let tasks = await getTasks(db, chatId);
		const tasksForDay = tasks[viewDay] || [];
		const filteredTasks = tasksForDay.filter((task) => {
			if (task.type === 'recursive') {
				return true;
			}
			return task.week === getWeekNumber(new Date());
		});
		const sortedTasks = sortTasksByTime(filteredTasks);
		if (taskIndex >= 0 && taskIndex < sortedTasks.length) {
			const taskInfo = sortedTasks[taskIndex];
			const toggleStatusText = taskInfo.status === '–ù–µ –≤–∏–∫–æ–Ω–∞–Ω–æ' ? '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ' : '‚ùå –ù–µ –≤–∏–∫–æ–Ω–∞–Ω–æ';
			const inlineKeyboard = {
				inline_keyboard: [
					[
						{ text: toggleStatusText, callback_data: `toggle_${viewDay}_${taskIndex}` },
						{ text: 'üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏', callback_data: `delete_${viewDay}_${taskIndex}` },
					],
					[{ text: '–ù–∞–∑–∞–¥', callback_data: `back_${viewDay}` }],
				],
			};
			const messageText = `–ó–∞–≤–¥–∞–Ω–Ω—è: *${taskInfo.task}*\n–ß–∞—Å: *${taskInfo.time}*\n–°—Ç–∞—Ç—É—Å: *${
				taskInfo.status === '–ù–µ –≤–∏–∫–æ–Ω–∞–Ω–æ' ? '‚ùå' : '‚úÖ'
			}*`;
			await editTelegramMessage(TELEGRAM_API_URL, chatId, messageId, messageText, { reply_markup: inlineKeyboard, parse_mode: 'Markdown' });
		} else {
			await sendMessage(TELEGRAM_API_URL, chatId, '–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üîç');
		}
	} else if (data.startsWith('toggle_')) {
		const parts = data.split('_');
		const viewDay = parts[1];
		const taskIndex = parseInt(parts[2], 10);
		let tasks = await getTasks(db, chatId);
		const tasksForDay = tasks[viewDay] || [];
		const filteredTasks = tasksForDay.filter((task) => {
			if (task.type === 'recursive') {
				return true;
			}
			return task.week === getWeekNumber(new Date());
		});
		const sortedTasks = sortTasksByTime(filteredTasks);
		if (taskIndex >= 0 && taskIndex < sortedTasks.length) {
			const taskInfo = sortedTasks[taskIndex];
			taskInfo.status = taskInfo.status === '–ù–µ –≤–∏–∫–æ–Ω–∞–Ω–æ' ? '–í–∏–∫–æ–Ω–∞–Ω–æ' : '–ù–µ –≤–∏–∫–æ–Ω–∞–Ω–æ';
			if (taskInfo.status === '–í–∏–∫–æ–Ω–∞–Ω–æ') {
				taskInfo.completed_at = new Date().toISOString();
				taskInfo.last_completed_at = new Date().toISOString();
			}
			await db
				.prepare('UPDATE tasks SET status = ?, completed_at = ?, last_completed_at = ? WHERE id = ?')
				.bind(taskInfo.status, taskInfo.completed_at, taskInfo.last_completed_at, taskInfo.id)
				.run();
			await handleViewTasks(db, TELEGRAM_API_URL, chatId, viewDay, messageId);
		} else {
			await sendMessage(TELEGRAM_API_URL, chatId, '–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üîç');
		}
	} else if (data.startsWith('delete_')) {
		const parts = data.split('_');
		const viewDay = parts[1];
		const taskIndex = parseInt(parts[2], 10);
		let tasks = await getTasks(db, chatId);
		const tasksForDay = tasks[viewDay] || [];
		const filteredTasks = tasksForDay.filter((task) => {
			if (task.type === 'recursive') {
				return true;
			}
			return task.week === getWeekNumber(new Date());
		});
		const sortedTasks = sortTasksByTime(filteredTasks);
		if (taskIndex >= 0 && taskIndex < sortedTasks.length) {
			const taskInfo = sortedTasks[taskIndex];
			await db.prepare('DELETE FROM tasks WHERE id = ?').bind(taskInfo.id).run();
			await handleViewTasks(db, TELEGRAM_API_URL, chatId, viewDay, messageId);
		} else {
			await sendMessage(TELEGRAM_API_URL, chatId, '–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üîç');
		}
	} else if (data.startsWith('refresh_')) {
		const parts = data.split('_');
		const viewDay = parts[1];
		await handleViewTasksButtons(db, TELEGRAM_API_URL, chatId, viewDay, messageId);
	} else if (data.startsWith('back_')) {
		const parts = data.split('_');
		const viewDay = parts[1];
		await handleViewTasks(db, TELEGRAM_API_URL, chatId, viewDay, messageId);
	} else if (data.startsWith('delete_all_')) {
		const parts = data.split('_');
		const viewDay = parts[1];
		await db.prepare('DELETE FROM tasks WHERE chat_id = ? AND day = ?').bind(chatId, viewDay).run();
		await handleViewTasks(db, TELEGRAM_API_URL, chatId, viewDay, messageId);
	} else {
		console.error('Unknown callback data:', data);
	}
	await answerCallbackQuery(TELEGRAM_API_URL, callbackQuery.id);
}
