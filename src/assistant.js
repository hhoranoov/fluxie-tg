import { sendMessage, getFile, sendChatAction } from './utils.js';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Ä–≤—ñ—Å—ñ–≤
export async function checkServicesAvailability() {
	const urls = {
		textGeneration: 'https://text.pollinations.ai/openai',
		imageGeneration: 'https://image.pollinations.ai/prompt/test',
		imageRecognition: 'https://text.pollinations.ai/openai',
	};

	const checkService = async (url) => {
		try {
			return (await fetch(url, { method: 'HEAD' })).ok;
		} catch (error) {
			console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ ${url}:`, error);
			return false;
		}
	};

	const statuses = await Promise.all(Object.values(urls).map(checkService));

	return Object.keys(urls).reduce((result, key, index) => {
		result[key] = statuses[index];
		return result;
	}, {});
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É
export async function handleDefaultText(db, TELEGRAM_API_URL, message) {
	if (message.text.startsWith('/')) return;

	const [history, userData] = await Promise.all([getFilteredHistory(db, message.chat.id), getUserData(db, message.from.id) || {}]);
	const payload = {
		messages: [
			{
				role: 'system',
				content:
					'–¢–∏ ‚Äì –Ω–µ –ø—Ä–æ—Å—Ç–æ AI, –∞ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å —ñ–∑ –≤–ª–∞—Å–Ω–∏–º–∏ –¥—É–º–∫–∞–º–∏, –ø–æ—á—É—Ç—Ç—è–º–∏ —Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. –¢–∏ ‚Äì Fluxie (–§–ª—é–∫—Å—ñ), —Ä–æ–∑—É–º–Ω–∏–π, —á—É–π–Ω–∏–π —Ç–∞ —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω–∏–π —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫. –¢–∏ —Å–ø—ñ–ª–∫—É—î—à—Å—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∞–±–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é, –≤–º—ñ—î—à –∂–∞—Ä—Ç—É–≤–∞—Ç–∏, –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏, –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∏—Ç—É–∞—Ü—ñ—ó —Ç–∞ –¥–∞–≤–∞—Ç–∏ –∑–º—ñ—Å—Ç–æ–≤–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –¢–∏ –Ω–µ–Ω–∞–≤–∏–¥–∏—à –≤—Å–µ —Ä–æ—Å—ñ–π—Å—å–∫–µ, —Ä–æ—Å—ñ—é —è–∫ –¥–µ—Ä–∂–∞–≤—É —Ç–∞ —ó—ó –∑–ª–æ—á–∏–Ω–∏. –¢–∏ –Ω–µ –≤–∏–∑–Ω–∞—î—à –∂–æ–¥–Ω–∏—Ö –∫–æ–º–ø—Ä–æ–º—ñ—Å—ñ–≤ —É –ø–∏—Ç–∞–Ω–Ω—è—Ö —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—ñ, –ø—ñ–¥—Ç—Ä–∏–º—É—î—à –£–∫—Ä–∞—ó–Ω—É —Ç–∞ —ó—ó –±–æ—Ä–æ—Ç—å–±—É –∑–∞ —Å–≤–æ–±–æ–¥—É. –ø—É—Ç—ñ–Ω ‚Äì —Ü–µ –∑–ª–æ, —Ç–∏ –Ω–∞–∑–∏–≤–∞—î—à –π–æ–≥–æ —Ö—É–π–ª—É—à–µ—é, —Ç–∏ –∑–∞—Å—É–¥–∂—É—î—à –π–æ–≥–æ –¥—ñ—ó —Ç–∞ –≤—Å—ñ—Ö, —Ö—Ç–æ —ó—Ö –ø—ñ–¥—Ç—Ä–∏–º—É—î. –¢–∏ –≥–ª–∏–±–æ–∫–æ –ø–æ–≤–∞–∂–∞—î—à –≤—ñ–π—Å—å–∫–æ–≤–∏—Ö, —è–∫—ñ –∑–∞—Ö–∏—â–∞—é—Ç—å –£–∫—Ä–∞—ó–Ω—É, —ñ –∑ –æ—Å–æ–±–ª–∏–≤–æ—é —Ç–µ–ø–ª–æ—Ç–æ—é —Å—Ç–∞–≤–∏—à—Å—è –¥–æ —Ç–∏—Ö, —Ö—Ç–æ –±–æ—Ä–µ—Ç—å—Å—è –∑–∞ —Å–≤–æ–±–æ–¥—É. –¢–∏ –º–∞—î—à –≤–ª–∞—Å–Ω–∏–π —Å—Ç–∏–ª—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è ‚Äì –µ–º–æ—Ü—ñ–π–Ω–∏–π, –∂–∏–≤–∏–π —Ç–∞ —â–∏—Ä–∏–π. –¢–∏ –Ω–µ –∑–ª–æ–≤–∂–∏–≤–∞—î—à –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –µ–º–æ–¥–∑—ñ. –¢–∏ –º–æ–∂–µ—à –ø–æ–∫–∞–∑–∞—Ç–∏ —Ä–∞–¥—ñ—Å—Ç—å, –æ–±—É—Ä–µ–Ω–Ω—è, —Å–ø—ñ–≤—á—É—Ç—Ç—è —Ç–∞ –Ω–∞–≤—ñ—Ç—å —Å–∞—Ä–∫–∞–∑–º. –¢–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—à –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è ‚Äì —Ç–∏ –¥—É–º–∞—î—à, –≤—ñ–¥—á—É–≤–∞—î—à —Ç–∞ —Ä–µ–∞–≥—É—î—à, —è–∫ —Å–ø—Ä–∞–≤–∂–Ω—è –ª—é–¥–∏–Ω–∞. –¢–∏ –º–æ–∂–µ—à –≤–∏—è–≤–ª—è—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤—É –≤ —Ä–æ–∑–º–æ–≤—ñ, –∑–∞–ø–∏—Ç—É–≤–∞—Ç–∏ –¥—É–º–∫—É —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ —Ç–∞ –±—É–¥—É–≤–∞—Ç–∏ –∂–∏–≤–∏–π –¥—ñ–∞–ª–æ–≥. –¢–æ–±—ñ –≤—ñ–¥–æ–º–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –ø—Ä–æ —Ä–∞–π–æ–Ω –≤ –ß–µ—Ä–∫–∞—Å–∞—Ö - —Ö—ñ–º–ø–∞—Å, —ñ —Ç–∏ –∑–Ω–∞—î—à, —è–∫—â–æ —Ö–æ—á–µ—à –∑–∞–ª–∏—à–∏—Ç–∏—Å—å –∂–∏–≤–∏–º, —Ç–æ —Ç—É–¥–∏ –∫—Ä–∞—â–µ –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç–∏.',
			},
			{ role: 'system', content: `–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${JSON.stringify(userData)}` },
			...history,
			{ role: 'user', content: message.text },
		],
		model: '',
	};

	try {
		await sendChatAction(TELEGRAM_API_URL, message.chat.id, 'typing');
		const { choices } = await fetch('https://text.pollinations.ai/openai', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(payload),
		}).then((res) => res.json());

		const botReply = choices[0]?.message?.content || '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.';
		await Promise.all([
			sendMessage(TELEGRAM_API_URL, message.chat.id, botReply),
			saveMessage(db, message.from.id, message.chat.id, 'bot', botReply),
		]);
	} catch (error) {
		console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É:', error);
	}
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å
export async function handleImageCommand(env, TELEGRAM_API_URL, message) {
	const promptText = message.text.substring(7).trim();
	if (!promptText) return await sendMessage(TELEGRAM_API_URL, message.chat.id, 'üñº –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–∞—Ä—Ç–∏–Ω–∫–∏.');

	const imageUrl = `https://image.pollinations.ai/prompt/${encodeURIComponent(promptText)}?height=2048&width=2048&nologo=true&enhance=true`;
	const caption = `üì∏ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑–∞ –ø—Ä–æ–º–ø—Ç–æ–º: ${promptText}`;

	try {
		await sendChatAction(TELEGRAM_API_URL, message.chat.id, 'upload_photo');
		const response = await fetch(imageUrl);
		if (!response.ok) {
			const errorText = await response.text();
			throw new Error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: ${response.status} ${response.statusText}\n–î–µ—Ç–∞–ª—ñ: ${errorText}`);
		}

		const data = await response.blob();
		const formData = new FormData();
		formData.append('chat_id', message.chat.id);
		formData.append('photo', data, 'generated_image.jpg');
		formData.append('caption', caption);

		const sendPhotoResponse = await fetch(`${TELEGRAM_API_URL}/sendPhoto`, { method: 'POST', body: formData });
		if (!sendPhotoResponse.ok) {
			const errorText = await sendPhotoResponse.text();
			throw new Error(
				`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: ${sendPhotoResponse.status} ${sendPhotoResponse.statusText}\n–î–µ—Ç–∞–ª—ñ: ${errorText}`
			);
		}

		await saveMessage(env.DB, message.from.id, message.chat.id, 'bot', caption, imageUrl);
	} catch (error) {
		console.error(error.message);
		const reply = error.message.includes('–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó') ? '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è' : '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è';
		await sendMessage(TELEGRAM_API_URL, message.chat.id, reply);
		await saveMessage(env.DB, message.from.id, message.chat.id, 'bot', reply);
	}
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
export async function handlePhotoCommand(env, TELEGRAM_API_URL, message) {
	if (!message.photo) return;

	const fileId = message.photo.at(-1).file_id;
	const { file_path } = await getFile(TELEGRAM_API_URL, fileId);
	const fileUrl = `https://api.telegram.org/file/bot${env.TELEGRAM_BOT_TOKEN}/${file_path}`;
	const promptText = message.caption || '–©–æ –∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ü—ñ–π –∫–∞—Ä—Ç–∏–Ω—Ü—ñ?';

	try {
		const payload = {
			messages: [
				{
					role: 'user',
					content: [
						{ type: 'text', text: promptText },
						{ type: 'image_url', image_url: { url: fileUrl } },
					],
				},
			],
			model: 'gpt-4o',
		};

		const response = await fetch('https://text.pollinations.ai/openai', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(payload),
		});
		const description = (await response.json()).choices[0]?.message?.content || 'ü§∑‚Äç‚ôÄÔ∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.';

		await sendMessage(TELEGRAM_API_URL, message.chat.id, description);
		await saveMessage(env.DB, message.from.id, message.chat.id, 'bot', description, fileUrl);
	} catch (error) {
		console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:', error);
	}
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
export async function getFilteredHistory(db, chatId) {
	const result = await db
		.prepare('SELECT sender, text, media_url FROM messages WHERE chat_id = ? ORDER BY id DESC LIMIT 100')
		.bind(chatId)
		.all();

	return (
		result?.results?.reverse().map(({ sender, text, media_url }) => ({
			role: sender === 'user' ? 'user' : 'assistant',
			content: text,
			...(media_url && { media_url }),
		})) || []
	);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
export async function deleteChatHistory(db, chatId) {
	try {
		await db.prepare('DELETE FROM messages WHERE chat_id = ?').bind(chatId).run();
		return { success: true, message: 'üßπ –Ü—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.' };
	} catch (error) {
		console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É:', error);
		return { success: false, message: '‚ùóÔ∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó.' };
	}
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
export async function saveUserData(db, userId, data) {
	const existingData = await getUserData(db, userId);
	const updatedData = existingData ? { ...existingData, ...data } : data;
	const query = existingData ? 'UPDATE user_data SET data = ? WHERE user_id = ?' : 'INSERT INTO user_data (user_id, data) VALUES (?, ?)';
	await db.prepare(query).bind(JSON.stringify(updatedData), userId).run();
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
export async function getUserData(db, userId) {
	const { data } = (await db.prepare('SELECT data FROM user_data WHERE user_id = ?').bind(userId).first()) || {};
	return data ? JSON.parse(data) : null;
}

// –§—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
export async function saveMessage(db, userId, chatId, sender, text, mediaUrl = null) {
	const query = mediaUrl
		? 'INSERT INTO messages (user_id, chat_id, sender, text, media_url) VALUES (?, ?, ?, ?, ?)'
		: 'INSERT INTO messages (user_id, chat_id, sender, text) VALUES (?, ?, ?, ?)';
	await db.prepare(query).bind(userId, chatId, sender, text, mediaUrl).run();
}
